name: Full spikeinterface tests

on:
  pull_request:
    types: [synchronize, opened, reopened]

concurrency:  # Cancel previous workflows on the same pull request
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:  #  For the sortingview backend
  KACHERY_CLOUD_CLIENT_ID: ${{ secrets.KACHERY_CLOUD_CLIENT_ID }}
  KACHERY_CLOUD_PRIVATE_KEY: ${{ secrets.KACHERY_CLOUD_PRIVATE_KEY }}

jobs:
  build-and-test:
    name: Test on (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # "macos-latest", "windows-latest"
        os: ["ubuntu-latest", ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Get current year-month
        id: date
        run: echo "date=$(date +'%Y-%m')" >> $GITHUB_OUTPUT
      - uses: actions/cache/restore@v3
        id: cache-venv
        with:
          path: ~/test_env
          key: ${{ runner.os }}-venv-${{ hashFiles('**/pyproject.toml') }}-${{ steps.date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Python version
        run: |
          python --version
      - name: Install dependencies
        run: |
          sudo apt update
          # this is for datalad and download testing datasets
          sudo apt install git 
          # this is for spyking circus
          # sudo apt install mpich libmpich-dev
          # needed for correct operation of git/git-annex/DataLad
          git config --global user.email "CI@example.com"
          git config --global user.name "CI Almighty"
          python -m venv ~/test_env
          python -m pip install -U pip  # Official recommended way
          source ~/test_env/bin/activate
          pip install tabulate  # This produces summaries at the end
          ## clean some cache to avoid using old cache
          pip cache remove numpy
          pip cache remove hdbscan
          pip cache remove numba
          # herdingspikes need numpy to installed first, this numpy pre install will be removed when HS remove from testing
          pip install numpy==1.22
          pip install -e .[test,extractors,full]
      - name: git-annex install
        run: |
          wget https://downloads.kitenet.net/git-annex/linux/current/git-annex-standalone-amd64.tar.gz
          tar xvzf git-annex-standalone-amd64.tar.gz
          echo "$(pwd)/git-annex.linux" >> $GITHUB_PATH
      - name: git-annex version
        run: |
          git-annex version
      - name: Packages installed
        run: |
          source ~/test_env/bin/activate
          pip list
      - name: Get ephy_testing_data current head hash
        # the key depend on the last comit repo https://gin.g-node.org/NeuralEnsemble/ephy_testing_data.git
        id: vars
        run: |
          echo "HASH_EPHY_DATASET=$(git ls-remote https://gin.g-node.org/NeuralEnsemble/ephy_testing_data.git HEAD | cut -f1)" >> $GITHUB_OUTPUT
      - uses: actions/cache/restore@v3
        id: cache-datasets
        env:
          # the key depend on the last comit repo https://gin.g-node.org/NeuralEnsemble/ephy_testing_data.git
          HASH_EPHY_DATASET: git ls-remote https://gin.g-node.org/NeuralEnsemble/ephy_testing_data.git HEAD | cut -f1
        with:
          path: ~/spikeinterface_datasets
          key: ${{ runner.os }}-datasets-${{ steps.vars.outputs.HASH_EPHY_DATASET }}
          restore-keys: |
            ${{ runner.os }}-datasets
      - name: Check ephy_testing_data files
        run: |
          if [ -d "$HOME/spikeinterface_datasets" ]; then
            find $HOME/spikeinterface_datasets
          fi
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
      - name: Module changes
        id: modules-changed
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file == *"/core/"* || $file == *"/extractors/neoextractors/neobaseextractor.py" ]]; then
              echo "Core changed"
              echo "CORE_CHANGED=true" >> $GITHUB_OUTPUT
            fi
            if [[ $file == *"/extractors/"* ]]; then
              echo "Extractors changed"
              echo "EXTRACTORS_CHANGED=true" >> $GITHUB_OUTPUT
            fi
            if [[ $file == *"/preprocessing/"* ]]; then
              echo "Preprocessing changed"
              echo "PREPROCESSING_CHANGED=true" >> $GITHUB_OUTPUT
            fi
            if [[ $file == *"/postprocessing/"* ]]; then
              echo "Postprocessing changed"
              echo "POSTPROCESSING_CHANGED=true" >> $GITHUB_OUTPUT
            fi
            if [[ $file == *"/qualitymetrics/"* ]]; then
              echo "Quality metrics changed"
              echo "QUALITYMETRICS_CHANGED=true" >> $GITHUB_OUTPUT
            fi
            if [[ $file == *"/sorters/"* ]]; then
              echo "Sorters changed"
              echo "SORTERS_CHANGED=true" >> $GITHUB_OUTPUT
            fi
            if [[ $file == *"/sorters/si_based_sorters"* ]]; then
              echo "SI sorters changed"
              echo "SI_SORTERS_CHANGED=true" >> $GITHUB_OUTPUT
            fi
            if [[ $file == *"/comparison/"* ]]; then
              echo "Comparison changed"
              echo "COMPARISON_CHANGED=true" >> $GITHUB_OUTPUT
            fi
            if [[ $file == *"/curation/"* ]]; then
              echo "Curation changed"
              echo "CURATION_CHANGED=true" >> $GITHUB_OUTPUT
            fi
            if [[ $file == *"/widgets/"* ]]; then
              echo "Widgets changed"
              echo "WIDGETS_CHANGED=true" >> $GITHUB_OUTPUT
            fi
            if [[ $file == *"/exporters/"* ]]; then
              echo "Exporters changed"
              echo "EXPORTERS_CHANGED=true" >> $GITHUB_OUTPUT
            fi
            if [[ $file == *"/sortingcomponents/"* ]]; then
              echo "Sortingcomponents changed"
              echo "SORTINGCOMPONENTS_CHANGED=true" >> $GITHUB_OUTPUT
            fi
          done
      - name: Test core
        run: |
          source ~/test_env/bin/activate
          pytest -vv -m core --durations=0 --durations-min=0.001 > report_core.txt
          cat report_core.txt
          echo "# Timing profile of core tests" >> $GITHUB_STEP_SUMMARY 
          python ./.github/build_job_summary.py report_core.txt >> $GITHUB_STEP_SUMMARY 
          cat $GITHUB_STEP_SUMMARY 
          rm report_core.txt
      - name: Test extractors
        if: ${{ steps.modules-changed.outputs.EXTRACTORS_CHANGED == 'true' }}
        run: |
          source ~/test_env/bin/activate
          pytest -vv -s -m extractors --durations=0 --durations-min=0.001 > report_extractors.txt
          cat report_extractors.txt
          echo "# Timing profile of extractors" >> $GITHUB_STEP_SUMMARY 
          python ./.github/build_job_summary.py report_extractors.txt >> $GITHUB_STEP_SUMMARY 
          cat $GITHUB_STEP_SUMMARY 
          rm report_extractors.txt
      - name: Test preprocessing
        if: ${{ steps.modules-changed.outputs.PREPROCESSING_CHANGED == 'true' || steps.modules-changed.outputs.CORE_CHANGED == 'true' }}
        run: |
          source ~/test_env/bin/activate
          pytest -vv -s -m preprocessing --durations=0 --durations-min=0.001 > report_preprocessing.txt
          cat report_preprocessing.txt
          echo "# Timing profile of preprocessing" >> $GITHUB_STEP_SUMMARY 
          python ./.github/build_job_summary.py report_preprocessing.txt >> $GITHUB_STEP_SUMMARY 
          cat $GITHUB_STEP_SUMMARY 
          rm report_preprocessing.txt
      - name: Test postprocessing
        if: ${{ steps.modules-changed.outputs.POSTPROCESSING_CHANGED == 'true' || steps.modules-changed.outputs.CORE_CHANGED == 'true' }}
        run: |
          source ~/test_env/bin/activate
          pytest -vv -s -m postprocessing --durations=0 --durations-min=0.001 > report_postprocessing.txt
          cat report_postprocessing.txt
          echo "# Timing profile of postprocessing" >> $GITHUB_STEP_SUMMARY 
          python ./.github/build_job_summary.py report_postprocessing.txt >> $GITHUB_STEP_SUMMARY 
          cat $GITHUB_STEP_SUMMARY 
          rm report_postprocessing.txt
      - name: Test quality metrics
        if: ${{ steps.modules-changed.outputs.QUALITYMETRICS_CHANGED == 'true' || steps.modules-changed.outputs.CORE_CHANGED == 'true' }}
        run: |
          source ~/test_env/bin/activate
          pytest -vv -s -m qualitymetrics --durations=0 --durations-min=0.001 > report_qualitymetrics.txt
          cat report_qualitymetrics.txt
          echo "# Timing profile of qualitymetrics" >> $GITHUB_STEP_SUMMARY 
          python ./.github/build_job_summary.py report_qualitymetrics.txt >> $GITHUB_STEP_SUMMARY 
          cat $GITHUB_STEP_SUMMARY 
          rm report_qualitymetrics.txt
      - name: Test sorters
        if: ${{ steps.modules-changed.outputs.SORTERS_CHANGED == 'true' || steps.modules-changed.outputs.CORE_CHANGED == 'true' }}
        run: |
          source ~/test_env/bin/activate
          pytest -vv -s -m sorters --durations=0 --durations-min=0.001 > report_sorters.txt
          cat report_sorters.txt
          echo "# Timing profile of sorters" >> $GITHUB_STEP_SUMMARY 
          python ./.github/build_job_summary.py report_sorters.txt >> $GITHUB_STEP_SUMMARY 
          cat $GITHUB_STEP_SUMMARY 
          rm report_sorters.txt
      - name: Test comparison
        if: ${{ steps.modules-changed.outputs.COMPARISON_CHANGED == 'true' || steps.modules-changed.outputs.CORE_CHANGED == 'true' }}
        run: |
          source ~/test_env/bin/activate
          pytest -vv -s -m comparison --durations=0 --durations-min=0.001 > report_comparison.txt
          cat report_comparison.txt
          echo "# Timing profile of comparison" >> $GITHUB_STEP_SUMMARY 
          python ./.github/build_job_summary.py report_comparison.txt >> $GITHUB_STEP_SUMMARY 
          cat $GITHUB_STEP_SUMMARY 
          rm report_comparison.txt
      - name: Test curation
        if: ${{ steps.modules-changed.outputs.CURATION_CHANGED == 'true' || steps.modules-changed.outputs.CORE_CHANGED == 'true' }}
        run: |
          source ~/test_env/bin/activate
          pytest -vv -s -m curation --durations=0 --durations-min=0.001 > report_curation.txt
          cat report_curation.txt
          echo "# Timing profile of curation" >> $GITHUB_STEP_SUMMARY 
          python ./.github/build_job_summary.py report_curation.txt >> $GITHUB_STEP_SUMMARY 
          cat $GITHUB_STEP_SUMMARY 
          rm report_curation.txt
      - name: Test widgets
        if: ${{ steps.modules-changed.outputs.WIDGETS_CHANGED == 'true' || steps.modules-changed.outputs.CORE_CHANGED == 'true' || steps.modules-changed.outputs.QUALITYMETRICS_CHANGED == 'true' ||  steps.modules-changed.outputs.PREPROCESSING_CHANGED == 'true'}}
        run: |
          source ~/test_env/bin/activate
          pytest -vv -s -m widgets --durations=0 --durations-min=0.001 > report_widgets.txt
          cat report_widgets.txt
          echo "# Timing profile of widgets" >> $GITHUB_STEP_SUMMARY 
          python ./.github/build_job_summary.py report_widgets.txt >> $GITHUB_STEP_SUMMARY 
          cat $GITHUB_STEP_SUMMARY 
          rm report_widgets.txt
      - name: Test exporters
        if: ${{ steps.modules-changed.outputs.EXPORTERS_CHANGED == 'true' || steps.modules-changed.outputs.CORE_CHANGED == 'true' || steps.modules-changed.outputs.WIDGETS_CHANGED == 'true' }}
        run: |
          source ~/test_env/bin/activate
          pytest -vv -s -m exporters --durations=0 --durations-min=0.001 > report_exporters.txt
          cat report_exporters.txt
          echo "# Timing profile of exporters" >> $GITHUB_STEP_SUMMARY 
          python ./.github/build_job_summary.py report_exporters.txt >> $GITHUB_STEP_SUMMARY 
          cat $GITHUB_STEP_SUMMARY 
          rm report_exporters.txt
      - name: Test sortingcomponents
        if: ${{ steps.modules-changed.outputs.SORTINGCOMPONENTS_CHANGED == 'true' || steps.modules-changed.outputs.CORE_CHANGED == 'true' }}
        run: |
          source ~/test_env/bin/activate
          pytest -vv -s -m sortingcomponents --durations=0 --durations-min=0.001 > report_sortingcomponents.txt
          cat report_sortingcomponents.txt
          echo "# Timing profile of sortingcomponents" >> $GITHUB_STEP_SUMMARY 
          python ./.github/build_job_summary.py report_sortingcomponents.txt >> $GITHUB_STEP_SUMMARY 
          cat $GITHUB_STEP_SUMMARY 
          rm report_sortingcomponents.txt
      - name: Test SI sorters
        if: ${{ steps.modules-changed.outputs.SI_SORTERS_CHANGED == 'true' || steps.modules-changed.outputs.SORTINGCOMPONENTS_CHANGED || steps.modules-changed.outputs.CORE_CHANGED == 'true' }}
        run: |
          source ~/test_env/bin/activate
          pytest -vv -s -m si_sorters --durations=0 --durations-min=0.001 > report_si_sorters.txt
          cat report_si_sorters.txt
          echo "# Timing profile of si_sorters" >> $GITHUB_STEP_SUMMARY 
          python ./.github/build_job_summary.py report_si_sorters.txt >> $GITHUB_STEP_SUMMARY 
          cat $GITHUB_STEP_SUMMARY 